#include <ctime>
#include <typeinfo>
#include <math.h>
#include <algorithm>
#include "PointSet.h"
#include "Point.h"

#define PI 3.14159265
using namespace std;

bool angLess(Point a, Point b){
  return a.getA() < b.getA();
}

void printV(vector<Point>* v, int s, int f){
  cout << "[";
  for(int i = s; i <= f; i++){
    cout << ((*v).at(i)).toString();
  }
  cout << "]";
}

void merge(vector<Point>* v,int l1,int l2,int r1,int r2){
  vector<Point> temp;
  
  int a = 0;
  int b = 0;
  
  for(int i = 0; i < (r2-l1)+1; i++){
    if (b == (r2-r1)+1){
      temp.insert(temp.begin()+i,(*v).at(l1+a));
      a++;
    }
    else if (a == (l2-l1)+1) {
      temp.insert(temp.begin()+i,(*v).at(r1+b));
      b++;
    }
    else if ((*v).at(l1+a) < (*v).at(r1+b)){
      temp.insert(temp.begin()+i,(*v).at(l1+a));
      a++;
    }
    else if ((*v).at(r1+b) < (*v).at(l1+a)){
      temp.insert(temp.begin()+i,(*v).at(r1+b));
      b++;
    }
    else{
      temp.insert(temp.begin()+i,(*v).at(l1+a));
      a++;
    }
  }
  
  for(int i = 0; i < (r2-l1)+1; i++){
    (*v)[i+l1] = temp.at(i);
  }
}

//
void mergeSort(vector<Point>* v ,int l, int r) {
  if ( r > l){
    int mid1 = (l+r)/2;
    int mid2 = ((l+r)/2)+1;
    mergeSort(v, l, mid1);
    mergeSort(v, mid2, r);

    merge(v, l, mid1, mid2, r);
  }
}

// Constructor for a set of points
PointSet::PointSet(int s, int xmax, int ymax){
  this -> size = s;
  srand(time(NULL));
  Point m(xmax,ymax);
  int a = 0;
  for(int i = 0; i < size; i++){
    int x = rand() % (xmax - 5) + 5;
    int y = rand() % (ymax - 5) + 5;
    Point p(x,y);
    if (p < m){
      m = p;
      a = i;
    }
    set.insert(set.begin()+i,p);
  }
  (this -> min) = &(set.at(a));
}


// Constructor for a set of points
PointSet::PointSet(int i){
  this -> size = 6;
  Point m1(300,0);
  set.insert(set.begin()+0,m1);
  Point m2(100,100);
  set.insert(set.begin()+1,m2);
  Point m3(100,200);
  set.insert(set.begin()+2,m3);
  Point m4(500,100);
  set.insert(set.begin()+3,m4);
  Point m5(500,200);
  set.insert(set.begin()+4,m5);
  Point m6(300,200);
  set.insert(set.begin()+5,m6);

  (this -> min) = &(set.at(0));
}

//
string PointSet::toString(){
  string o = "[";
  for(int i = 0; i < size; i++){
    o = o + set[i].toString();
  }
  o = o + "]\n";
  return o;
}


void PointSet::pointSort(){
  vector<Point>* v = &(this -> set);
  int s = (this -> size)-1;
  mergeSort(v,0,s); 
  (this -> min) = &(set.at(0));
  cout << "ALI ALI " << set.at(0).toString();
}


std::vector<Point>* PointSet::getConvexHull(vector<Point>* setcopy){
  int x1 = (*min).getX();
  int y1 = (*min).getY();
  // Gives an angle value to every Point
  for (int i = 0; i < (this -> size); i++){
    int x2 = (this -> set).at(i).getX();
    int y2 = (this -> set).at(i).getY();
    double ang = (atan2((y1-y2),(x1-x2)) * 180)/PI;
    (this -> set).at(i).setA(ang);
    (*setcopy).at(i).setA(ang);
  }
  
  (*setcopy).erase((*setcopy).begin());
  sort((*setcopy).begin(),(*setcopy).end(),angLess);
  for (int i = 0; i < (*setcopy).size(); i++){
    cout << (*setcopy).at(i).toString() << "\n\n";
  }
  return setcopy;
}


// int main(){
//   Point hola(32,30);
//   Point hola1(32,30);
//   //  cout << hola.toString() << "\n";
//   //cout << to_string(hola == hola1) << "\n";

//   PointSet conj(1);
//   //  cout << "\n\n\nJAJAJAJA" << (*min).toString() << "\n\n\n";

//   cout << "\n\nQuetepario\n" << conj.getMin().toString() << endl;
  
//   cout << "Inicial : "<< conj.toString() << endl;

//   conj.pointSort();

//   vector<Point>* holi = conj.getConvexHull();
    
//   cout << conj.toString() << "\n";
  

//   cout << "\n\nLaconchadelalora\n" << conj.getMin().toString();
//   return 0;
// }

